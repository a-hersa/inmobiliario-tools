services:
  web:
    image: ahersa/web-inmobiliario:latest
    container_name: inmobiliario-web
    restart: always
    environment:
      - SCRAPINGANT=${SCRAPINGANT}
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TURNSTILE_SITE_KEY=${TURNSTILE_SITE_KEY}
      - TZ=Europe/Madrid
      - FLASK_CMD=gunicorn --bind 0.0.0.0:5000 -w 3 app:app  # Comando de producción
    networks:
      - flask_network
      - reverse-proxy

  shiny:
    image: ahersa/shiny-inmobiliario:latest
    container_name: inmobiliario-shiny
    restart: always
    environment:
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Madrid
    networks:
      - flask_network
      - reverse-proxy
  
  scrapy:
    image: ahersa/scrapy-inmobiliario:latest
    container_name: inmobiliario-scrapy
    restart: unless-stopped
    # Esto mantiene el contenedor en ejecución sin hacer nada.
    environment: 
      - SCRAPINGANT=${SCRAPINGANT}
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Madrid
    networks:
      - flask_network
    command: tail -f /dev/null 

  postgres:
    image: postgres:17
    container_name: inmobiliario-postgres
    restart: always
    environment:
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Madrid
    volumes:
      - inmobiliario-tools_postgres_data:/var/lib/postgresql/data
    networks:
      - flask_network
    ports:
      - 5432:5432

networks:
  flask_network: {}
  reverse-proxy:
    external: true

volumes:
  inmobiliario-tools_postgres_data:
    external: true
